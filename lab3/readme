In this assignment, I will be delving into the realm of sequential circuitry, exploring its intricacies and solving a variety of problems within this domain. Through a series of challenges, I will be designing and implementing circuits using different types of flip flops, constructing finite state machines (FSMs), and addressing specific requirements and constraints.

The assignment begins with an introduction to sequential circuitry, emphasizing the importance of testing mechanisms and ensuring a thorough understanding of their functioning. I will be tasked with hooking up two D flip flops in sequence, creating a two-bit shift register. The input pin "q" will be connected to the first flip flop, and the output of the first flip flop will serve as the input to the second flip flop, producing the value of "q1ago" representing the state of "q" one clock cycle ago. Furthermore, the output of the second flip flop will be "q2ago," representing the state of "q" two clock cycles ago.

Moving on, I will be challenged to design an eight-bit register using T flip flops instead of the commonly used D flip flops. This register will store values and begin with an initial state of all zeroes (0000 0000). While limited to using only eight T flip flops, I will also have the freedom to incorporate XOR gates in addition to the AND, OR, and NOT gates typically employed.

Next, I will delve into the implementation of an FSM based on a given state table. The state transition table will be derived from the provided information, and K-maps will be employed to simplify the expressions for the next states and outputs. The objective is to create a functional circuit in Logisim Evolution that accurately realizes the FSM defined in the table. It's worth noting that this problem allows for a maximum of two flip flops, and specific limitations are placed on the number of AND and OR gates, emphasizing the importance of minimizing the combinational logic.

Continuing with FSM implementation, I will tackle the challenge of constructing an FSM circuit based on a state transition diagram. The diagram will provide insights into the FSM's behavior, and I will translate it into a corresponding state transition table. Utilizing K-maps, I will simplify the expressions for the next states and the output signal. As with the previous problem, the maximum allowed number of flip flops, AND gates, and OR gates is specified, urging the optimization of the combinational logic to maintain efficiency.

Shifting gears, I will move on to developing a parity generator using a minimal state table and an FSM modeled after the Moore model. This FSM will generate a parity bit based on the observed three-bit sequences received on the input signal. The output signal will be set to 1 if the number of ones in the sequence is odd, adhering to the concept of even parity. It's important to note that the FSM can output 1 before receiving all three bits, creating dynamic behavior based on the number of ones encountered. As with previous problems, the number of flip flops and the limits on the AND and OR gates must be adhered to, ensuring a minimal and efficient design.

Continuing with the theme of sequential circuitry, I will tackle the challenge of implementing a Mealy model FSM functioning as a sequence checker. The FSM will evaluate four consecutive clock cycles, forming a four-bit sequence based on the input signal. The circuit will output a 1 if the previous sequence matches specific predefined patterns (0010 or 1100); otherwise, the output will be set to 0. This FSM does not employ a sliding window mechanism, and after the fourth clock pulse, it resets to begin processing the next four-bit sequence. Constraints regarding the number of flip flops, AND gates, and OR gates apply, emphasizing the importance of optimization
